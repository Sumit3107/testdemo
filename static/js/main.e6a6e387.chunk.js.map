{"version":3,"sources":["components/counter.js","components/counters.js","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["counter","styles","fontSize","formatSpan","value","props","Fragment","style","this","className","getBadgeClasses","onClick","onIncrement","onDecrement","disabled","onDelete","id","classes","renderTags","Component","Counters","onReset","counters","map","item","key","Navbar","state","href","totalCounters","App","handleReset","a","console","log","setState","handleIncrement","index","indexOf","handleDecrement","handleDelete","filter","c","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e6a6e387.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../shared/css/component.css\";\r\nclass counter extends Component {\r\n  styles = {\r\n    fontSize: 15,\r\n  };\r\n  //   constructor(){\r\n  //       super();\r\n  //       this.handleClick = this.handleClick.bind(this);\r\n  //   }\r\n  renderTags() {\r\n    return (\r\n      <React.Fragment>\r\n        {/* {this.props.children} */}\r\n        <span style={this.styles} className={this.getBadgeClasses()}>\r\n          {this.formatSpan()}\r\n        </span>\r\n        <button\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n          onClick={()=>this.props.onIncrement(this.props.counter)}\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n          onClick={()=>this.props.onDecrement(this.props.counter)}\r\n          disabled={this.props.counter.value > 0 ? \"\" : \"disabled\"}\r\n        >\r\n          Decrement\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n          onClick={() => this.props.onDelete(this.props.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  \r\n\r\n  formatSpan = () => {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  };\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"container-fluid\">{this.renderTags()}</div>;\r\n  }\r\n}\r\n\r\nexport default counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button\r\n          onClick={this.props.onReset}\r\n          className=\"btn btn-primary btn-sm-2\"\r\n        >\r\n          Reset\r\n        </button>\r\n        {this.props.counters.map((item) => (\r\n          <Counter\r\n            key={item.id}\r\n            id={item.id}\r\n            value={item.value}\r\n            counter={item}\r\n            onDelete={this.props.onDelete}\r\n            onIncrement={this.props.onIncrement}\r\n            onDecrement={this.props.onDecrement}\r\n          >\r\n            {/* <h1>Hello</h1>\r\n              <h2>World</h2> */}\r\n          </Counter>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"/\">Navbar\r\n    <span className=\"badge badge-pill badge-secondary\">{this.props.totalCounters}</span>\r\n    </a>\r\n        </nav> );\r\n    }\r\n}\r\n \r\nexport default Navbar;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Counters from \"./components/counters\";\r\nimport Navbar from \"./components/navbar\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, value: 0 },\r\n      { id: 2, value: 0 },\r\n      { id: 3, value: 0 },\r\n      { id: 4, value: 0 },\r\n    ],\r\n  };\r\n\r\n  handleReset = () => {\r\n    const counters = this.state.counters.map((a) => {\r\n      console.log(a);\r\n      a.value = 0;\r\n      return a;\r\n    });\r\n    this.setState({ counters });\r\n  };\r\n\r\n  handleIncrement = (counter) => {\r\n    console.log(counter);\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    console.log(counters[index]);\r\n    counters[index] = { ...counter };\r\n    console.log(counters[index]);\r\n    counters[index].value++;\r\n    this.setState({ counters });\r\n    // console.log(this.state.value);\r\n    // this.state.value = this.state.value+1;\r\n    // this.setState({ value: this.state.value + 1 });\r\n  };\r\n\r\n  handleDecrement = (counter) => {\r\n    console.log(counter);\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    console.log(counters[index]);\r\n    counters[index] = { ...counter };\r\n    console.log(counters[index]);\r\n    counters[index].value--;\r\n    this.setState({ counters });\r\n    // console.log(this.state.value);\r\n    // this.state.value = this.state.value+1;\r\n    // this.setState({ value: this.state.value + 1 });\r\n  };\r\n\r\n\r\n  handleDelete = (id) => {\r\n    console.log(\"Event handler delete call\", id);\r\n    const counters = this.state.counters.filter((a) => a.id !== id);\r\n    console.log(counters);\r\n    this.setState({ counters });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar totalCounters={this.state.counters.filter(c => c.value>0).length} />\r\n        <main className=\"container mt-2\">\r\n          <Counters\r\n            counters={this.state.counters}\r\n            onReset={this.handleReset}\r\n            onIncrement={this.handleIncrement}\r\n            onDecrement={this.handleDecrement}\r\n            onDelete={this.handleDelete}\r\n          />\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\n/********************************* */\r\n//    User Imported Objects/Classes\r\n/********************************* */\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}